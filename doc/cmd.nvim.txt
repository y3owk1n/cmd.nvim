*cmd.nvim* Execute CLI commands in Neovim
*Cmd*

Features:
 - Execute CLI commands with output in buffers or terminal
 - Shell completion support for commands
 - Command history tracking
 - Async execution with progress notifications
 - Configurable spinner adapters for different notification plugins
 - Environment variable support per executable
 - Timeout handling and command cancellation

# Setup ~

This module needs to be set up with `require('cmd').setup({})` (replace
`{}` with your `config` table).

# Highlighting ~

Plugin defines several highlight groups:
 - `CmdHistoryNormal` - for history floating window (linked to `NormalFloat`)
 - `CmdHistoryBorder` - for history floating window border (linked to `FloatBorder`)
 - `CmdHistoryTitle` - for history floating window title (linked to `FloatTitle`)
 - `CmdHistoryIdentifier` - for command ID in history (linked to `Identifier`)
 - `CmdHistoryTime` - for timestamp in history (linked to `Comment`)
 - `CmdSuccess` - for successful commands (linked to `MoreMsg`)
 - `CmdFailed` - for failed commands (linked to `ErrorMsg`)
 - `CmdCancelled` - for cancelled commands (linked to `WarningMsg`)

To change any highlight group, modify it directly with |:highlight|.


==============================================================================
Table of Contents                                                 *cmd.contents*

Setup ······························································ |cmd.setup|
Configuration ····················································· |cmd.config|
Commands ························································ |cmd.commands|
API ·································································· |cmd.api|

==============================================================================
Setup                                                                *cmd.setup*

==============================================================================

                                                                   *Cmd.setup()*
                                                                     *Cmd-setup*
# Module setup ~

>lua
   require('cmd').setup() -- use default config
   -- OR
   require('cmd').setup({}) -- replace {} with your config table
<

==============================================================================
Configuration                                                       *cmd.config*

==============================================================================

                                                                    *Cmd.config*
# Module config ~

Default values:
{
  force_terminal = {},
  create_usercmd = {},
  env = {},
  timeout = 30000,
  completion = {
    enabled = false,
    shell = vim.env.SHELL or "/bin/sh",
  },
  async_notifier = {
    spinner_chars = { "⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏" },
    adapter = nil,
  },
  history_formatter_fn = U.default_history_formatter,
}

## Force terminal execution ~

Some commands should always run in terminal mode. Use `force_terminal`
to specify patterns that trigger terminal execution:
>lua
   require('cmd').setup({
     force_terminal = {
       git = { 'push', 'pull', 'fetch' }, -- git push/pull/fetch always in terminal
       npm = { 'run' },                   -- npm run always in terminal
     }
   })
<

## Auto-create user commands ~

Automatically create user commands for executables if they don't exist:
>lua
   require('cmd').setup({
     create_usercmd = {
       git = 'Git',     -- Creates :Git command if it doesn't exist
       npm = 'Npm',     -- Creates :Npm command if it doesn't exist
       docker = 'Docker', -- Creates :Docker command if it doesn't exist
     }
   })
<

## Environment variables ~

Set environment variables per executable:
>lua
   require('cmd').setup({
     env = {
       node = { 'NODE_ENV=development' },
       python = { 'PYTHONPATH=/custom/path' },
     }
   })
<

## Completion configuration ~

Configure shell completion behavior:
>lua
   require('cmd').setup({
     completion = {
       enabled = true,
       shell = '/bin/fish', -- Use fish for completion
       prompt_pattern_to_remove = '^%$ ', -- Remove '$ ' prompt
     }
   })
<

## Async notifications ~

Configure progress notifications with different adapters:
>lua
   -- Using built-in snacks.nvim adapter
   require('cmd').setup({
     async_notifier = {
       adapter = require('cmd').builtins.spinner_adapters.snacks,
       spinner_chars = { '⣾', '⣽', '⣻', '⢿', '⡿', '⣟', '⣯', '⣷' },
     }
   })

   -- Using custom adapter
   require('cmd').setup({
     async_notifier = {
       adapter = {
         start = function(msg, data)
           return vim.notify(msg, vim.log.levels.INFO)
         end,
         update = function(id, msg, data)
           vim.notify(msg, vim.log.levels.INFO, { replace = id })
         end,
         finish = function(id, msg, level, data)
           vim.notify(msg, vim.log.levels[level], { replace = id })
         end,
       }
     }
   })
<

==============================================================================
Commands                                                          *cmd.commands*

==============================================================================

                                                                          *:Cmd*
                                                                      *Cmd-:Cmd*
# Execute a CLI command ~

Run any CLI command with optional shell completion and async notifications.
Use `!` to force terminal execution, `!!` to rerun last command in terminal.

>vim
   :Cmd git status           " Run in async without terminal
   :Cmd! git log --oneline   " Force terminal execution
<

                                                                     *:CmdRerun*
                                                                 *Cmd-:CmdRerun*
# Rerun a command from history ~

Rerun the last command or a specific command by ID.
Use `!` to force terminal execution.

>vim
   :CmdRerun      " Rerun last command
   :CmdRerun 5    " Rerun command #5 from history
   :CmdRerun! 3   " Rerun command #3 in terminal
<

                                                                    *:CmdCancel*
                                                                *Cmd-:CmdCancel*
# Cancel running commands ~

Cancel currently running command(s).
Use `!` to cancel all running commands.

>vim
   :CmdCancel     " Cancel last running command
   :CmdCancel 2   " Cancel command #2
   :CmdCancel!    " Cancel all running commands
<

                                                                   *:CmdHistory*
                                                               *Cmd-:CmdHistory*
# Show command history ~

Display a formatted list of all executed commands with their status,
timestamps, and execution type.

>vim
   :CmdHistory    " Show command history in buffer
<

==============================================================================
API                                                                    *cmd.api*

==============================================================================

                                                                           *Cmd*
                                                                      *cmd-main*
Cmd                                                                *cmd.api.Cmd*
    Main module table


Cmd.CommandHistory                                  *cmd.api.Cmd.CommandHistory*
    ---------------------------------------------------------------

    Fields: ~
        {id}          (integer)              Unique command identifier
                                             Represents a single command entry in the execution history.
        {cmd?}        (string[])             Command arguments array
        {timestamp?}  (number)               Unix timestamp when command was executed
        {type?}       (Cmd.CommandType)      Execution type
        {status?}     (Cmd.CommandStatus)    Current command status
        {job?}        (uv.uv_process_t|nil)  Process handle if command is running


Cmd.CommandType                                        *cmd.api.Cmd.CommandType*

    Variants: ~
        ("normal")       Command executed in buffer mode
        ("interactive")  Command executed in terminal mode


Cmd.CommandStatus                                    *cmd.api.Cmd.CommandStatus*

    Variants: ~
        ("success")    Command completed successfully (exit code 0)
        ("failed")     Command failed (non-zero exit code)
        ("cancelled")  Command was cancelled by user
        ("running")    Command is currently executing


Cmd.Spinner                                                *cmd.api.Cmd.Spinner*

    Fields: ~
        {timer}   (uv.uv_timer_t|nil)  Timer handle for spinner animation
                                       Represents the state of a progress spinner for a running command.
        {active}  (boolean)            Whether spinner is currently active
        {msg}     (string)             Current spinner message text
        {title}   (string)             Spinner notification title
        {cmd}     (string)             Full command string being executed


Cmd.State                                                    *cmd.api.Cmd.State*

    Fields: ~
        {cwd}                (string)                      Current working directory for command execution
                                                           Internal state management for the plugin.
        {temp_script_cache}  (table<string,string>)        Cache of temporary completion scripts
        {spinner_state}      (table<integer,Cmd.Spinner>)  Active spinner states by command ID
        {command_history}    (Cmd.CommandHistory[])        Complete command execution history


Cmd.LogLevel                                              *cmd.api.Cmd.LogLevel*

    Variants: ~
        ("INFO")   Informational message
        ("WARN")   Warning message
        ("ERROR")  Error message


Cmd.FormattedLineOpts                            *cmd.api.Cmd.FormattedLineOpts*
    ---------------------------------------------------------------

    Fields: ~
        {display_text}  (string)   The display text
        {hl_group?}     (string)   The highlight group of the text
        {is_virtual?}   (boolean)  Whether the line is virtual


                                                  *cmd.api.Cmd.ComputedLineOpts*
Cmd.ComputedLineOpts : Cmd.FormattedLineOpts

    Fields: ~
        {col_start?}          (number)  The start column of the text, NOTE: this is calculated and for type purpose only
        {col_end?}            (number)  The end column of the text, NOTE: this is calculated and for type purpose only
        {virtual_col_start?}  (number)  The start virtual column of the text, NOTE: this is calculated and for type purpose only
        {virtual_col_end?}    (number)  The end virtual column of the text, NOTE: this is calculated and for type purpose only


Cmd.CommandHistoryFormatterOpts        *cmd.api.Cmd.CommandHistoryFormatterOpts*

    Fields: ~
        {history}  (Cmd.CommandHistory)


Cmd.SpinnerDriver                                    *cmd.api.Cmd.SpinnerDriver*

    Fields: ~
        {pre_exec}   (fun(opts:Cmd.Config.AsyncNotifier.PreExec):string|integer|number|nil)  Function called before command execution
                                                                                             Driver interface for managing spinner lifecycle during command execution.
        {post_exec}  (fun(opts:Cmd.Config.AsyncNotifier.PostExec))                           Function called after command completion


Cmd.RunResult                                            *cmd.api.Cmd.RunResult*
    ---------------------------------------------------------------

    Fields: ~
        {code}  (integer)  Exit code of the command (0 for success)
                           Result of a command execution, returned only for synchronous operations.
        {out}   (string)   Standard output content
        {err}   (string)   Standard error content


                                                                    *Cmd.config*
Cmd.Config.Completion                            *cmd.api.Cmd.Config.Completion*

    Fields: ~
        {enabled?}                   (boolean)  Whether to enable shell completion (default: false)
                                                Configuration for shell completion functionality.
        {shell?}                     (string)   Shell executable to use for completion (default: $SHELL or "/bin/sh")
        {prompt_pattern_to_remove?}  (string)   Regex pattern to remove from completion output


Cmd.Config.AsyncNotifier.PreExec      *cmd.api.Cmd.Config.AsyncNotifier.PreExec*

    Fields: ~
        {command_id}             (integer)                                       Unique command identifier
                                                                                 Context passed to spinner adapter before command execution.
        {args_raw}               (string[])                                      Original command arguments array
        {args}                   (string)                                        Concatenated command string
        {set_spinner_state}      (fun(command_id:integer,opts:Cmd.Spinner|nil))  Set spinner state
        {get_spinner_state}      (fun(command_id:integer):Cmd.Spinner|nil)       Get spinner state
        {spinner_chars}          (string[])                                      Array of spinner animation characters
        {current_spinner_char?}  (string)                                        Currently displayed spinner character


                                     *cmd.api.Cmd.Config.AsyncNotifier.PostExec*
Cmd.Config.AsyncNotifier.PostExec

    Fields: ~
        {command_id}                 (integer)                                       Unique command identifier
                                                                                     Context passed to spinner adapter after command execution.
        {args_raw}                   (string[])                                      Original command arguments array
        {args}                       (string)                                        Concatenated command string
        {set_spinner_state}          (fun(command_id:integer,opts:Cmd.Spinner|nil))  Set spinner state
        {get_spinner_state}          (fun(command_id:integer):Cmd.Spinner|nil)       Get spinner state
        {status}                     (Cmd.CommandStatus)                             Final command execution status
        {user_defined_notifier_id?}  (string|integer|number|nil)                     Adapter-specific notification ID


Cmd.Config.AsyncNotifier                      *cmd.api.Cmd.Config.AsyncNotifier*

    Fields: ~
        {spinner_chars?}  (string[])                                 Characters for spinner animation (default: braille patterns)
                                                                     Configuration for async command notifications and progress indicators.
        {adapter?}        (Cmd.Config.AsyncNotifier.SpinnerAdapter)  Custom notification adapter


                               *cmd.api.Cmd.Config.AsyncNotifier.SpinnerAdapter*
Cmd.Config.AsyncNotifier.SpinnerAdapter

    Fields: ~
        {start}   (fun(msg:string,data:Cmd.Config.AsyncNotifier.PreExec):string|integer|nil)                    Initialize progress notification
                                                                                                                Interface for custom notification adapters to handle progress display.
        {update}  (fun(notify_id:string|integer|number|nil,msg:string,data:Cmd.Config.AsyncNotifier.PreExec))   Update progress message
        {finish}  (fun(notify_id:string,msg:string,level:Cmd.LogLevel,data:Cmd.Config.AsyncNotifier.PostExec))  Show final result


Cmd.Config                                                  *cmd.api.Cmd.Config*

    Fields: ~
        {force_terminal?}        (table<string,string[]>)                                             Patterns that force terminal execution per executable
                                                                                                      Main configuration table for the Cmd plugin.
        {create_usercmd?}        (table<string,string>)                                               Auto-create user commands for executables
        {env?}                   (table<string,string[]>)                                             Environment variables per executable
        {timeout?}               (integer)                                                            Default command timeout in milliseconds (default: 30000)
        {completion?}            (Cmd.Config.Completion)                                              Shell completion configuration
        {async_notifier?}        (Cmd.Config.AsyncNotifier)                                           Progress notification configuration
        {history_formatter_fn?}  (fun(opts:Cmd.CommandHistoryFormatterOpts):Cmd.FormattedLineOpts[])  Formatter function for history display


                                                                  *Cmd.defaults*
Cmd.defaults                                                  *cmd.api.defaults*
    Default configuration values for all plugin options.

    Type: ~
        (Cmd.Config)


                                                                   *Cmd.setup()*
Cmd.setup({user_config?})                                        *cmd.api.setup*
    Set up the Cmd plugin with user configuration.

    Initializes all plugin components, validates configuration,
    creates user commands, and sets up necessary autocmds and highlights.


    Parameters: ~
        {user_config?}  (Cmd.Config)  User configuration to merge with defaults

    Returns: ~
        (nil)

    Usage: ~
>lua
           -- Minimal setup with defaults
           require('cmd').setup()

           -- Custom configuration
           require('cmd').setup({
             completion = { enabled = true },
             timeout = 60000,
             async_notifier = {
               adapter = require('cmd').builtins.spinner_adapters.snacks
             }
           })
<


Cmd.builtins                                              *cmd.api.Cmd.builtins*

    Fields: ~
        {spinner_driver}    (fun(adapter:Cmd.Config.AsyncNotifier.SpinnerAdapter):Cmd.SpinnerDriver)  Create spinner driver for adapter
                                                                                                      Built-in utilities and adapters for extending plugin functionality.
        {spinner_adapters}  (table)


                                                                  *Cmd.builtins*
Cmd.builtins                                                  *cmd.api.builtins*
    Built-in utilities and notification adapters.

    Provides pre-built notification adapters for popular plugins and utilities
    for creating custom notification implementations.


    Type: ~
        (Cmd.builtins)

    Usage: ~
>lua
           -- Use built-in snacks.nvim adapter
           require('cmd').setup({
             async_notifier = {
               adapter = require('cmd').builtins.spinner_adapters.snacks
             }
           })

           -- Create custom adapter with spinner driver
           local custom_adapter = {
             start = function(msg) return my_notify_start(msg) end,
             update = function(id, msg) my_notify_update(id, msg) end,
             finish = function(id, msg, level) my_notify_finish(id, msg, level) end
           }
           local driver = require('cmd').builtins.spinner_driver(custom_adapter)

           -- Custom history formatter
           local custom_history_formatter = function(opts)
             local history = opts.history
             local formatted = {}

             for i = 1, #history do
               local entry = history[i]
               local formatted_line = {
                 display_text = entry.cmd[1],
                 hl_group = "CmdHistoryIdentifier",
                 is_virtual = true,
               }
               table.insert(formatted, formatted_line)
             end

             return formatted
           end
           require('cmd').setup({
             history_formatter_fn = custom_history_formatter
           })
<


vim:tw=78:ts=8:noet:ft=help:norl:
